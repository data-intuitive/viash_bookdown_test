info:
  platform_path: src/viash_bookdown/merge_reports/platform_native.yaml
  functionality_path: src/viash_bookdown/merge_reports/functionality.yaml
  git_remote: '[Ljava.lang.String;@1c742ed4'
  git_commit: 54e3b09
  executable_path: target/native/viash_bookdown/merge_reports/merge_reports
  version: v0.2.0-rc2
  output_path: target/native/viash_bookdown/merge_reports
functionality:
  description: Merge multiple reports into one bookdown
  name: merge_reports
  arguments:
  - default: report.md
    alternatives:
    - -i
    direction: Input
    must_exist: false
    type: file
    required: true
    name: --input
    multiple: true
    multiple_sep: ':'
    description: One or more input files (md or Rmd)
  - name: --output
    multiple_sep: ':'
    multiple: false
    description: Path of the report.
    required: false
    type: file
    must_exist: false
    direction: Output
    alternatives:
    - -o
  - description: The format of the output file.
    alternatives:
    - -f
    type: string
    values:
    - bookdown::pdf_book
    - bookdown::html_book
    name: --format
    multiple_sep: ':'
    direction: Input
    multiple: false
    required: false
    default: bookdown::pdf_book
  tests: []
  resources:
  - type: bash_script
    text: "#!/usr/bin/env bash\n\nset -e\n\n# define helper functions\n# ViashQuote:\
      \ put quotes around non flag values\n# $1     : unquoted string\n# return :\
      \ possibly quoted string\n# examples:\n#   ViashQuote --foo      # returns --foo\n\
      #   ViashQuote bar        # returns 'bar'\n#   Viashquote --foo=bar  # returns\
      \ --foo='bar'\nfunction ViashQuote {\n  if [[ \"$1\" =~ ^-+[a-zA-Z0-9_\\-]+=.+$\
      \ ]]; then\n    echo \"$1\" | sed \"s#=\\(.*\\)#='\\1'#\"\n  elif [[ \"$1\"\
      \ =~ ^-+[a-zA-Z0-9_\\-]+$ ]]; then\n    echo \"$1\"\n  else\n    echo \"'$1'\"\
      \n  fi\n}\n# ViashRemoveFlags: Remove leading flag\n# $1     : string with a\
      \ possible leading flag\n# return : string without possible leading flag\n#\
      \ examples:\n#   ViashRemoveFlags --foo=bar  # returns bar\nfunction ViashRemoveFlags\
      \ {\n  echo \"$1\" | sed 's/^--*[a-zA-Z0-9_\\-]*=//'\n}\n# ViashSourceDir: return\
      \ the path of a bash file, following symlinks\n# usage   : ViashSourceDir ${BASH_SOURCE[0]}\n\
      # $1      : Should always be set to ${BASH_SOURCE[0]}\n# returns : The absolute\
      \ path of the bash file\nfunction ViashSourceDir {\n  SOURCE=\"$1\"\n  while\
      \ [ -h \"$SOURCE\" ]; do\n    DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" >/dev/null\
      \ 2>&1 && pwd )\"\n    SOURCE=\"$(readlink \"$SOURCE\")\"\n    [[ $SOURCE !=\
      \ /* ]] && SOURCE=\"$DIR/$SOURCE\"\n  done\n  cd -P \"$( dirname \"$SOURCE\"\
      \ )\" >/dev/null 2>&1 && pwd\n}\n\n# find source folder of this component\n\
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`\n\n# helper function\
      \ for installing extra requirements for this component\nfunction ViashDockerfile\
      \ {\necho ''\n}\n\n# helper function for installing extra requirements for this\
      \ component\n\nfunction ViashSetup {\nRscript -e 'if (!requireNamespace(\"remotes\"\
      , quietly = TRUE)) install.packages(\"remotes\")' && \\\n  Rscript -e 'remotes::install_cran(c(\"\
      optparse\", \"rmarkdown\", \"tidyverse\"), repos = \"https://cran.rstudio.com\"\
      )'\n\n}\n# ViashHelp: Display helpful explanation about this executable\nfunction\
      \ ViashHelp {\n   echo \"Merge multiple reports into one bookdown\"\n   echo\n\
      \   echo \"Options:\"\n    echo \"    -i file1:file2:..., --input=file1:file2:...\"\
      \n    echo \"        type: file, required parameter, multiple values allowed,\
      \ default: report.md\"\n    echo \"        One or more input files (md or Rmd)\"\
      \n    echo \"\"\n    echo \"    -o file, --output=file\"\n    echo \"      \
      \  type: file\"\n    echo \"        Path of the report.\"\n    echo \"\"\n \
      \   echo \"    -f string, --format=string\"\n    echo \"        type: string,\
      \ default: bookdown::pdf_book\"\n    echo \"        The format of the output\
      \ file.\"\n    echo \"\"\n}\n\n\n# initialise array\nVIASH_POSITIONAL_ARGS=''\n\
      \nwhile [[ $# -gt 0 ]]; do\n    case \"$1\" in\n        -h|--help)\n       \
      \     ViashHelp\n            exit;;\n        ---setup)\n            ViashSetup\n\
      \            exit 0\n            ;;\n        ---dockerfile)\n            ViashDockerfile\n\
      \            exit 0\n            ;;\n        --input)\n            if [ -z \"\
      $VIASH_PAR_INPUT\" ]; then\n              VIASH_PAR_INPUT=\"$2\"\n         \
      \   else\n              VIASH_PAR_INPUT=\"$VIASH_PAR_INPUT:\"\"$2\"\n      \
      \      fi\n            shift 2\n            ;;\n        --input=*)\n       \
      \     if [ -z \"$VIASH_PAR_INPUT\" ]; then\n              VIASH_PAR_INPUT=$(ViashRemoveFlags\
      \ \"$1\")\n            else\n              VIASH_PAR_INPUT=\"$VIASH_PAR_INPUT:\"\
      $(ViashRemoveFlags \"$1\")\n            fi\n            shift 1\n          \
      \  ;;\n        -i)\n            if [ -z \"$VIASH_PAR_INPUT\" ]; then\n     \
      \         VIASH_PAR_INPUT=\"$2\"\n            else\n              VIASH_PAR_INPUT=\"\
      $VIASH_PAR_INPUT:\"\"$2\"\n            fi\n            shift 2\n           \
      \ ;;\n        --output)\n            VIASH_PAR_OUTPUT=\"$2\"\n            shift\
      \ 2\n            ;;\n        --output=*)\n            VIASH_PAR_OUTPUT=$(ViashRemoveFlags\
      \ \"$1\")\n            shift 1\n            ;;\n        -o)\n            VIASH_PAR_OUTPUT=\"\
      $2\"\n            shift 2\n            ;;\n        --format)\n            VIASH_PAR_FORMAT=\"\
      $2\"\n            shift 2\n            ;;\n        --format=*)\n           \
      \ VIASH_PAR_FORMAT=$(ViashRemoveFlags \"$1\")\n            shift 1\n       \
      \     ;;\n        -f)\n            VIASH_PAR_FORMAT=\"$2\"\n            shift\
      \ 2\n            ;;\n\n        *)    # positional arg or unknown option\n  \
      \          # since the positional args will be eval'd, can we always quote,\
      \ instead of using ViashQuote?\n            VIASH_POSITIONAL_ARGS=\"$VIASH_POSITIONAL_ARGS\
      \ '$1'\"\n            shift # past argument\n            ;;\n    esac\ndone\n\
      \n# parse positional parameters\neval set -- $VIASH_POSITIONAL_ARGS\n\n\n\n\
      # check whether required parameters exist\nif [ -z \"$VIASH_PAR_INPUT\" ]; then\n\
      \  echo '--input' is a required argument. Use \"--help\" to get more information\
      \ on the parameters.\n  exit 1\nfi\nif [ -z \"$VIASH_PAR_FORMAT\" ]; then\n\
      \  VIASH_PAR_FORMAT=\"bookdown::pdf_book\"\nfi\n\n\n\n\ncat << VIASHEOF | bash\
      \ \nset -e\ntempscript=\\$(mktemp /tmp/viash-run-merge_reports-XXXXXX)\nfunction\
      \ clean_up {\n  rm \"\\$tempscript\"\n}\ntrap clean_up EXIT\ncat > \"\\$tempscript\"\
      \ << 'VIASHMAIN'\n### VIASH START\n# The following code has been auto-generated\
      \ by Viash.\npar <- list(\n  \"input\" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ];\
      \ then echo \"strsplit('$VIASH_PAR_INPUT', split = ':')[[1]]\"; else echo NULL;\
      \ fi ),\n  \"output\" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo \"'$VIASH_PAR_OUTPUT'\"\
      ; else echo NULL; fi ),\n  \"format\" = $( if [ ! -z ${VIASH_PAR_FORMAT+x} ];\
      \ then echo \"'$VIASH_PAR_FORMAT'\"; else echo NULL; fi )\n)\n\nresources_dir\
      \ = \"$VIASH_RESOURCES_DIR\"\n\n### VIASH END\n\nprint(par)\n\ncat(\"output\
      \ ls: \", paste(list.files(\"/viash_automount\"), collapse = \", \"), \"\\\\\
      n\", sep = \"\")\n\ncat(\"get absolute path to file\\\\n\")\ninput <- normalizePath(par\\\
      $input)\npath <- file.path(normalizePath(dirname(par\\$output), mustWork = FALSE),\
      \ basename(par\\$output))\nresources_dir <- normalizePath(resources_dir)\n\n\
      cat(\"set wd to output dir\\\\n\")\norig_wd <- getwd()\non.exit(setwd(orig_wd))\n\
      setwd(dirname(path))\n\ncat(\"copy template to output dir\\\\n\")\nrmd <- file.path(\"\
      .\", gsub(\"\\\\\\\\.[^\\\\\\\\.]*\\$\", \".Rmd\", basename(path)))\nfile.copy(\n\
      \  file.path(resources_dir, \"index.Rmd\"), \n  rmd,\n  overwrite = TRUE\n)\n\
      on.exit(file.remove(rmd))\n\ncat(\"copy inputs to output dir\\\\n\")\nnew_filenames\
      \ <- paste0(seq_along(input), \"-part.md\")\ninput_dirnames <- gsub(\"\\\\\\\
      \\.[^\\\\\\\\.]*\\$\", \"_files/\", input)\nnew_dirnames <- paste0(seq_along(input),\
      \ \"-part_files/\")\nfor (i in seq_along(input)) {\n  mdin <- input[[i]]\n \
      \ mdout <- new_filenames[[i]]\n  file.copy(mdin, mdout, overwrite = TRUE)\n\
      \  \n  dirin <- input_dirnames[[i]]\n  dirout <- new_dirnames[[i]]\n  if (file.exists(dirin))\
      \ {\n    if (file.exists(dirout)) {\n      unlink(dirout, recursive = TRUE)\n\
      \    }\n    dir.create(dirout)\n    file.copy(dirin, dirout, recursive = TRUE,\
      \ copy.mode = TRUE)\n  }\n  \n  # fix paths in md\n  lines <- readLines(mdout)\n\
      \  substitute_paths <- gsub(paste0(\"(\\\\\\\\[[^\\\\\\\\)]*\\\\\\\\])\\\\\\\
      \\((\", basename(dirin), \"[^\\\\\\\\)]*)\\\\\\\\)\"), paste0(\"\\\\\\\\1(\"\
      , dirout, \"\\\\\\\\2)\"), lines)\n  writeLines(substitute_paths, mdout)\n}\n\
      \nbookdown_yaml <- paste0(\"rmd_files: [\\\\\"\", paste0(c(rmd, new_filenames),\
      \ collapse = \"\\\\\", \\\\\"\"), \"\\\\\"]\\\\ndelete_merged_file: true\\\\\
      n\")\nwriteLines(bookdown_yaml, \"_bookdown.yml\")\n\nbookdown::render_book(\n\
      \  rmd,\n  output_format = par\\$format,\n  clean_envir = FALSE\n)\nVIASHMAIN\n\
      Rscript \"\\$tempscript\"\n\nVIASHEOF\n"
    name: merge_reports
    is_executable: true
  - type: file
    path: file:/Users/toni/code/viash_bookdown_test/src/viash_bookdown/merge_reports/index.Rmd
    is_executable: false
platform:
  type: native
  r:
    bitbucket: []
    bioc: []
    url: []
    svn: []
    github: []
    cran:
    - optparse
    - rmarkdown
    - tidyverse
    git: []
    gitlab: []
