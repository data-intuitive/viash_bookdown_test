info:
  platform_path: src/viash_bookdown/make_vignette/platform_docker.yaml
  functionality_path: src/viash_bookdown/make_vignette/functionality.yaml
  output_path: target/docker/viash_bookdown/make_vignette
  version: v0.2.0-rc2
  executable_path: target/docker/viash_bookdown/make_vignette/make_vignette
  git_commit: 54e3b09
  git_remote: '[Ljava.lang.String;@4dc27487'
functionality:
  description: An example for generating an RMarkdown output.
  resources:
  - type: bash_script
    text: "#!/usr/bin/env bash\n\nset -e\n\n# define helper functions\n# ViashQuote:\
      \ put quotes around non flag values\n# $1     : unquoted string\n# return :\
      \ possibly quoted string\n# examples:\n#   ViashQuote --foo      # returns --foo\n\
      #   ViashQuote bar        # returns 'bar'\n#   Viashquote --foo=bar  # returns\
      \ --foo='bar'\nfunction ViashQuote {\n  if [[ \"$1\" =~ ^-+[a-zA-Z0-9_\\-]+=.+$\
      \ ]]; then\n    echo \"$1\" | sed \"s#=\\(.*\\)#='\\1'#\"\n  elif [[ \"$1\"\
      \ =~ ^-+[a-zA-Z0-9_\\-]+$ ]]; then\n    echo \"$1\"\n  else\n    echo \"'$1'\"\
      \n  fi\n}\n# ViashRemoveFlags: Remove leading flag\n# $1     : string with a\
      \ possible leading flag\n# return : string without possible leading flag\n#\
      \ examples:\n#   ViashRemoveFlags --foo=bar  # returns bar\nfunction ViashRemoveFlags\
      \ {\n  echo \"$1\" | sed 's/^--*[a-zA-Z0-9_\\-]*=//'\n}\n# ViashSourceDir: return\
      \ the path of a bash file, following symlinks\n# usage   : ViashSourceDir ${BASH_SOURCE[0]}\n\
      # $1      : Should always be set to ${BASH_SOURCE[0]}\n# returns : The absolute\
      \ path of the bash file\nfunction ViashSourceDir {\n  SOURCE=\"$1\"\n  while\
      \ [ -h \"$SOURCE\" ]; do\n    DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" >/dev/null\
      \ 2>&1 && pwd )\"\n    SOURCE=\"$(readlink \"$SOURCE\")\"\n    [[ $SOURCE !=\
      \ /* ]] && SOURCE=\"$DIR/$SOURCE\"\n  done\n  cd -P \"$( dirname \"$SOURCE\"\
      \ )\" >/dev/null 2>&1 && pwd\n}\n\n# find source folder of this component\n\
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`\n\n# helper function\
      \ for installing extra requirements for this component\nfunction ViashDockerfile\
      \ {\n# Print Dockerfile contents to stdout\ncat << 'VIASHDOCKER'\nFROM rocker/verse\n\
      RUN Rscript -e 'if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"\
      remotes\")' && \\\n  Rscript -e 'remotes::install_cran(c(\"optparse\", \"rmarkdown\"\
      , \"tidyverse\"), repos = \"https://cran.rstudio.com\")'\n\nVIASHDOCKER\n}\n\
      \n# helper function for installing extra requirements for this component\n\n\
      function ViashSetup {\n# create temporary directory to store temporary dockerfile\
      \ in\ntmpdir=$(mktemp -d /tmp/viash_setupdocker-make_vignette-XXXXXX)\nfunction\
      \ clean_up {\n  rm -rf \"\\$tmpdir\"\n}\ntrap clean_up EXIT\ncat > $tmpdir/Dockerfile\
      \ << 'VIASHDOCKER'\nFROM rocker/verse\nRUN Rscript -e 'if (!requireNamespace(\"\
      remotes\", quietly = TRUE)) install.packages(\"remotes\")' && \\\n  Rscript\
      \ -e 'remotes::install_cran(c(\"optparse\", \"rmarkdown\", \"tidyverse\"), repos\
      \ = \"https://cran.rstudio.com\")'\n\nVIASHDOCKER\ndocker build -t viash_autogen/make_vignette:latest\
      \ $tmpdir\n}\n# ViashHelp: Display helpful explanation about this executable\n\
      function ViashHelp {\n   echo \"An example for generating an RMarkdown output.\"\
      \n   echo\n   echo \"Options:\"\n    echo \"    -t string, --title=string\"\n\
      \    echo \"        type: string, default: My plot\"\n    echo \"        A title\
      \ for the plot\"\n    echo \"\"\n    echo \"    -m double, --mean=double\"\n\
      \    echo \"        type: double, default: 0.0\"\n    echo \"        The mean\
      \ of the distribution\"\n    echo \"\"\n    echo \"    -s double, --sd=double\"\
      \n    echo \"        type: double, default: 1.0\"\n    echo \"        The standard\
      \ deviation of the distribution\"\n    echo \"\"\n    echo \"    -o file, --output=file\"\
      \n    echo \"        type: file\"\n    echo \"        Path of the report.\"\n\
      \    echo \"\"\n    echo \"    -f string, --format=string\"\n    echo \"   \
      \     type: string, default: pdf_document\"\n    echo \"        The format of\
      \ the output file.\"\n    echo \"\"\n}\n\n\n# ViashAbsolutePath: generate absolute\
      \ path from relative path\n# borrowed from https://stackoverflow.com/a/21951256\n\
      # $1     : relative filename\n# return : absolute path\n# examples:\n#   ViashAbsolutePath\
      \ some_file.txt   # returns /path/to/some_file.txt\n#   ViashAbsolutePath /foo/bar/..\
      \     # returns /foo\nfunction ViashAbsolutePath {\n  local thePath\n  if [[\
      \ ! \"$1\" =~ ^/ ]]; then\n    thePath=\"$PWD/$1\"\n  else\n    thePath=\"$1\"\
      \n  fi\n  echo \"$thePath\" | (\n    IFS=/\n    read -a parr\n    declare -a\
      \ outp\n    for i in \"${parr[@]}\"; do\n      case \"$i\" in\n      ''|.) continue\
      \ ;;\n      ..)\n        len=${#outp[@]}\n        if ((len==0)); then\n    \
      \      continue\n        else\n          unset outp[$((len-1))]\n        fi\n\
      \        ;;\n      *)\n        len=${#outp[@]}\n        outp[$len]=\"$i\"\n\
      \      ;;\n      esac\n    done\n    echo /\"${outp[*]}\"\n  )\n}\n# ViashAutodetectMount:\
      \ auto configuring docker mounts from parameters\n# $1                  : The\
      \ parameter value\n# returns             : New parameter\n# $VIASH_EXTRA_MOUNTS\
      \ : Added another parameter to be passed to docker\n# examples:\n#   ViashAutodetectMount\
      \ /path/to/bar      # returns '/viash_automount/path/to/bar'\n#   ViashAutodetectMountArg\
      \ /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'\nfunction\
      \ ViashAutodetectMount {\n  abs_path=$(ViashAbsolutePath \"$1\")\n  if [ -d\
      \ \"$abs_path\" ]; then\n    mount_source=\"$abs_path\"\n    base_name=\"\"\n\
      \  else\n    mount_source=`dirname \"$abs_path\"`\n    base_name=`basename \"\
      $abs_path\"`\n  fi\n  mount_target=\"/viash_automount$mount_source\"\n  echo\
      \ \"$mount_target/$base_name\"\n}\nfunction ViashAutodetectMountArg {\n  abs_path=$(ViashAbsolutePath\
      \ \"$1\")\n  if [ -d \"$abs_path\" ]; then\n    mount_source=\"$abs_path\"\n\
      \    base_name=\"\"\n  else\n    mount_source=`dirname \"$abs_path\"`\n    base_name=`basename\
      \ \"$abs_path\"`\n  fi\n  mount_target=\"/viash_automount$mount_source\"\n \
      \ echo \"-v \\\"$mount_source:$mount_target\\\"\"\n}\n# ViashExtractFlags: Retain\
      \ leading flag\n# $1     : string with a possible leading flag\n# return : leading\
      \ flag\n# examples:\n#   ViashExtractFlags --foo=bar  # returns --foo\nfunction\
      \ ViashExtractFlags {\n  echo $1 | sed 's/=.*//'\n}\n# initialise autodetect\
      \ mount variable\nVIASH_EXTRA_MOUNTS=''\n\n# initialise array\nVIASH_POSITIONAL_ARGS=''\n\
      \nwhile [[ $# -gt 0 ]]; do\n    case \"$1\" in\n        -h|--help)\n       \
      \     ViashHelp\n            exit;;\n        ---setup)\n            ViashSetup\n\
      \            exit 0\n            ;;\n        ---dockerfile)\n            ViashDockerfile\n\
      \            exit 0\n            ;;\n        --title)\n            VIASH_PAR_TITLE=\"\
      $2\"\n            shift 2\n            ;;\n        --title=*)\n            VIASH_PAR_TITLE=$(ViashRemoveFlags\
      \ \"$1\")\n            shift 1\n            ;;\n        -t)\n            VIASH_PAR_TITLE=\"\
      $2\"\n            shift 2\n            ;;\n        --mean)\n            VIASH_PAR_MEAN=\"\
      $2\"\n            shift 2\n            ;;\n        --mean=*)\n            VIASH_PAR_MEAN=$(ViashRemoveFlags\
      \ \"$1\")\n            shift 1\n            ;;\n        -m)\n            VIASH_PAR_MEAN=\"\
      $2\"\n            shift 2\n            ;;\n        --sd)\n            VIASH_PAR_SD=\"\
      $2\"\n            shift 2\n            ;;\n        --sd=*)\n            VIASH_PAR_SD=$(ViashRemoveFlags\
      \ \"$1\")\n            shift 1\n            ;;\n        -s)\n            VIASH_PAR_SD=\"\
      $2\"\n            shift 2\n            ;;\n        --output)\n            VIASH_PAR_OUTPUT=\"\
      $2\"\n            shift 2\n            ;;\n        --output=*)\n           \
      \ VIASH_PAR_OUTPUT=$(ViashRemoveFlags \"$1\")\n            shift 1\n       \
      \     ;;\n        -o)\n            VIASH_PAR_OUTPUT=\"$2\"\n            shift\
      \ 2\n            ;;\n        --format)\n            VIASH_PAR_FORMAT=\"$2\"\n\
      \            shift 2\n            ;;\n        --format=*)\n            VIASH_PAR_FORMAT=$(ViashRemoveFlags\
      \ \"$1\")\n            shift 1\n            ;;\n        -f)\n            VIASH_PAR_FORMAT=\"\
      $2\"\n            shift 2\n            ;;\n        ---v|---volume)\n       \
      \     VIASH_EXTRA_MOUNTS=\"$VIASH_EXTRA_MOUNTS -v \"$2\"\"\n            shift\
      \ 2\n            ;;\n        ---volume=*)\n            VIASH_EXTRA_MOUNTS=\"\
      $VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags \"$2\")\"\n            shift 1\n \
      \           ;;\n         ---debug)\n            VIASH_DEBUG=yes\n          \
      \  shift 1\n            ;;\n        *)    # positional arg or unknown option\n\
      \            # since the positional args will be eval'd, can we always quote,\
      \ instead of using ViashQuote?\n            VIASH_POSITIONAL_ARGS=\"$VIASH_POSITIONAL_ARGS\
      \ '$1'\"\n            shift # past argument\n            ;;\n    esac\ndone\n\
      \n# parse positional parameters\neval set -- $VIASH_POSITIONAL_ARGS\n\n\n\n\
      if [ -z \"$VIASH_PAR_TITLE\" ]; then\n  VIASH_PAR_TITLE=\"My plot\"\nfi\nif\
      \ [ -z \"$VIASH_PAR_MEAN\" ]; then\n  VIASH_PAR_MEAN=\"0.0\"\nfi\nif [ -z \"\
      $VIASH_PAR_SD\" ]; then\n  VIASH_PAR_SD=\"1.0\"\nfi\nif [ -z \"$VIASH_PAR_FORMAT\"\
      \ ]; then\n  VIASH_PAR_FORMAT=\"pdf_document\"\nfi\n\n\n\n\n\n# if desired,\
      \ enter a debug session\nif [ ${VIASH_DEBUG} ]; then\n  echo \"+ docker run\
      \ --entrypoint=bash -i --rm -v \"$VIASH_RESOURCES_DIR\":/resources -v `pwd`:/pwd\
      \ --workdir /pwd -t viash_autogen/make_vignette:latest\"\n  docker run --entrypoint=bash\
      \ -i --rm -v \"$VIASH_RESOURCES_DIR\":/resources -v `pwd`:/pwd --workdir /pwd\
      \ -t viash_autogen/make_vignette:latest\n  exit 0\nfi\n\n# detect volumes from\
      \ file arguments\nif [ ! -z \"$VIASH_PAR_OUTPUT\" ]; then\n  VIASH_EXTRA_MOUNTS=\"\
      $VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg \"$VIASH_PAR_OUTPUT\")\"\n  VIASH_PAR_OUTPUT=$(ViashAutodetectMount\
      \ \"$VIASH_PAR_OUTPUT\")\nfi\n\n\ncat << VIASHEOF | eval docker run --entrypoint=bash\
      \ -i --rm -v \"$VIASH_RESOURCES_DIR\":/resources $VIASH_EXTRA_MOUNTS viash_autogen/make_vignette:latest\
      \ \nset -e\ntempscript=\\$(mktemp /tmp/viash-run-make_vignette-XXXXXX)\nfunction\
      \ clean_up {\n  rm \"\\$tempscript\"\n}\ntrap clean_up EXIT\ncat > \"\\$tempscript\"\
      \ << 'VIASHMAIN'\n### VIASH START\n# The following code has been auto-generated\
      \ by Viash.\npar <- list(\n  \"title\" = $( if [ ! -z ${VIASH_PAR_TITLE+x} ];\
      \ then echo \"'$VIASH_PAR_TITLE'\"; else echo NULL; fi ),\n  \"mean\" = $( if\
      \ [ ! -z ${VIASH_PAR_MEAN+x} ]; then echo \"as.numeric($VIASH_PAR_MEAN)\"; else\
      \ echo NULL; fi ),\n  \"sd\" = $( if [ ! -z ${VIASH_PAR_SD+x} ]; then echo \"\
      as.numeric($VIASH_PAR_SD)\"; else echo NULL; fi ),\n  \"output\" = $( if [ !\
      \ -z ${VIASH_PAR_OUTPUT+x} ]; then echo \"'$VIASH_PAR_OUTPUT'\"; else echo NULL;\
      \ fi ),\n  \"format\" = $( if [ ! -z ${VIASH_PAR_FORMAT+x} ]; then echo \"'$VIASH_PAR_FORMAT'\"\
      ; else echo NULL; fi )\n)\n\nresources_dir = \"/resources\"\n\n### VIASH END\n\
      \n# get absolute path to file\nif (!file.exists(dirname(par\\$output))) dir.create(dirname(par\\\
      $output), recursive = TRUE)\nresources_dir <- normalizePath(resources_dir)\n\
      path <- file.path(normalizePath(dirname(par\\$output), mustWork = FALSE), basename(par\\\
      $output))\n\n# set wd to output dir\norig_wd <- getwd()\non.exit(setwd(orig_wd))\n\
      setwd(dirname(path))\n\n# copy template to output dir\nrmd <- file.path(\".\"\
      , gsub(\"\\\\\\\\.[^\\\\\\\\.]*\\$\", \".Rmd\", basename(path)))\nfile.copy(\n\
      \  file.path(resources_dir, \"report.Rmd\"), \n  rmd\n)\non.exit(file.remove(rmd))\n\
      \n# render markdown\nrmarkdown::render(\n  input = rmd,\n  output_file = basename(path),\n\
      \  output_format = par\\$format,\n  params = par[c(\"title\", \"mean\", \"sd\"\
      )]\n)\nVIASHMAIN\nRscript \"\\$tempscript\"\n\nVIASHEOF\n"
    is_executable: true
    name: make_vignette
  - type: file
    path: file:/Users/toni/code/viash_bookdown_test/src/viash_bookdown/make_vignette/report.Rmd
    is_executable: false
  arguments:
  - alternatives:
    - -t
    multiple: false
    default: My plot
    description: A title for the plot
    multiple_sep: ':'
    name: --title
    direction: Input
    required: false
    type: string
  - alternatives:
    - -m
    type: double
    default: 0.0
    multiple: false
    required: false
    multiple_sep: ':'
    name: --mean
    description: The mean of the distribution
    direction: Input
  - alternatives:
    - -s
    multiple: false
    direction: Input
    description: The standard deviation of the distribution
    multiple_sep: ':'
    required: false
    type: double
    name: --sd
    default: 1.0
  - multiple: false
    must_exist: false
    description: Path of the report.
    type: file
    direction: Output
    required: false
    alternatives:
    - -o
    name: --output
    multiple_sep: ':'
  - values:
    - pdf_document
    - html_document
    multiple_sep: ':'
    type: string
    multiple: false
    direction: Input
    description: The format of the output file.
    required: false
    default: pdf_document
    name: --format
    alternatives:
    - -f
  name: make_vignette
  tests: []
platform:
  image: rocker/verse
  r:
    gitlab: []
    cran:
    - optparse
    - rmarkdown
    - tidyverse
    url: []
    bitbucket: []
    svn: []
    github: []
    bioc: []
    git: []
  resolve_volume: Automatic
  type: docker
  workdir: /app
